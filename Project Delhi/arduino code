#include <SPI.h>
#include <MD_AD9833.h>

// Pins for SPI link with the AD9833
#define DATA  11  // SPI Data pin number (hardware SPI = 11)
#define CLK   13  // SPI Clock pin number (hardware SPI = 13)
#define FSYNC 10  // SPI Load pin number (FSYNC in AD9833 usage)

MD_AD9833 AD(FSYNC); // Hardware SPI
//MD_AD9833  AD(DATA, CLK, FSYNC); // Software SPI with any pins

#define POT   A0  // Potentiometer input
#define BTN   2   // Input Button (active low)

int mode;
int freq;
int lastbtn;

void setup () {
  pinMode (BTN, INPUT_PULLUP);
  pinMode (LED_BUILTIN, OUTPUT);
  AD.begin();
  mode = 0;
  freq = 0;
  lastbtn=HIGH;
}

void loop () {
  // Check the button for a mode change
  int btn = digitalRead(BTN);
  if ((btn == LOW) && (lastbtn == HIGH)) {
     // We have a HIGH to LOW transition
     mode++;
     switch (mode) {
       case 1: AD.setMode(MD_AD9833::MODE_SINE);     break;
       case 2: AD.setMode(MD_AD9833::MODE_TRIANGLE); break;
       case 3: AD.setMode(MD_AD9833::MODE_SQUARE1);  break;
       case 4: AD.setMode(MD_AD9833::MODE_SQUARE2);  break;

       default: AD.setMode(MD_AD9833::MODE_OFF);
         mode = 0;
         break;
     }

     // Include a short delay so it doesn't trigger straight away
     // (this is a crude way of "debouncing" the switch!)
     delay (500);
  }
  lastbtn = btn;

  // Check the potentiometer for the frequency
  // Pot will return 0 to 1023, so add 30 to give
  // a frequency range of 30 to 1053 Hz
  // NOTE: This requires a patch to the MD_AD9833.cpp file
  //       in the library!  See my project webpage for details!
  int potval = 30 + analogRead (POT);
  if (potval != freq) {
    // Change the frequency of the default channel
    freq = potval;
    AD.setFrequency(MD_AD9833::CHAN_0, freq);
  }
}

